import 'package:isar/isar.dart';
import 'dart:convert';

part 'itinerary_models.g.dart';

/// **Simple Itinerary Models - Manual Serialization**
/// 
/// Matches the exact JSON structure required by assignment (Spec A):
/// {
///   "title": "Kyoto 5-Day Solo Trip",
///   "startDate": "2025-04-10", 
///   "endDate": "2025-04-15",
///   "days": [...]
/// }

@Collection()
class ItineraryModel {
  /// Isar ID for local database
  Id isarId = Isar.autoIncrement;
  
  /// Unique identifier for the itinerary
  late String id;
  
  /// Trip title generated by AI
  late String title;
  
  /// Start date in ISO format (YYYY-MM-DD)
  late String startDate;
  
  /// End date in ISO format (YYYY-MM-DD)  
  late String endDate;
  
  /// List of daily plans (stored as JSON string in Isar)
  late String daysJson;
  
  /// User's original prompt that generated this itinerary
  String? originalPrompt;
  
  /// Timestamp when itinerary was created
  DateTime? createdAt;
  
  /// Timestamp when itinerary was last modified
  DateTime? updatedAt;

  ItineraryModel();

  /// Manual JSON serialization - simple and clean
  Map<String, dynamic> toJson() {
    return {
      'title': title,
      'startDate': startDate,
      'endDate': endDate,
      'days': days.map((day) => day.toJson()).toList(),
    };
  }

  /// Manual JSON deserialization
  factory ItineraryModel.fromJson(Map<String, dynamic> json) {
    final model = ItineraryModel()
      ..title = json['title'] as String
      ..startDate = json['startDate'] as String
      ..endDate = json['endDate'] as String;
    
    // Parse days from JSON
    final daysData = json['days'] as List<dynamic>;
    final daysList = daysData.map((dayJson) => 
        DayPlanModel.fromJson(dayJson as Map<String, dynamic>)
    ).toList();
    
    // Store as JSON string for Isar
    model.days = daysList;
    
    return model;
  }
  
  /// Get parsed days list
  @ignore
  List<DayPlanModel> get days {
    if (daysJson.isEmpty) return [];
    try {
      final List<dynamic> jsonList = jsonDecode(daysJson);
      return jsonList.map((json) => DayPlanModel.fromJson(json as Map<String, dynamic>)).toList();
    } catch (e) {
      return [];
    }
  }
  
  /// Set days list (converts to JSON string)
  set days(List<DayPlanModel> daysList) {
    daysJson = jsonEncode(daysList.map((day) => day.toJson()).toList());
  }
  
  /// Calculate trip duration in days
  int get durationDays => days.length;
}

/// Simple day plan model - Embedded object for Isar
@embedded
class DayPlanModel {
  /// Date in ISO format (YYYY-MM-DD)
  late String date;
  
  /// Brief summary of the day's theme
  late String summary;
  
  /// List of activities/items for this day (stored as JSON string)
  late String itemsJson;

  DayPlanModel();

  /// Get parsed activities list
  List<ActivityItemModel> get items {
    if (itemsJson.isEmpty) return [];
    try {
      final List<dynamic> jsonList = jsonDecode(itemsJson);
      return jsonList.map((json) => ActivityItemModel.fromJson(json as Map<String, dynamic>)).toList();
    } catch (e) {
      return [];
    }
  }
  
  /// Set activities list (converts to JSON string)
  set items(List<ActivityItemModel> itemsList) {
    itemsJson = jsonEncode(itemsList.map((item) => item.toJson()).toList());
  }

  /// Manual serialization
  Map<String, dynamic> toJson() {
    return {
      'date': date,
      'summary': summary,
      'items': items.map((item) => item.toJson()).toList(),
    };
  }

  factory DayPlanModel.fromJson(Map<String, dynamic> json) {
    final model = DayPlanModel()
      ..date = json['date'] as String
      ..summary = json['summary'] as String;
    
    final itemsData = json['items'] as List<dynamic>;
    final itemsList = itemsData.map((itemJson) => 
        ActivityItemModel.fromJson(itemJson as Map<String, dynamic>)
    ).toList();
    
    model.items = itemsList;
    return model;
  }
}

/// activity item model - Embedded object for Isar
@embedded
class ActivityItemModel {
  /// Time in HH:MM format (24-hour)
  late String time;
  
  /// Activity description
  late String activity;
  
  /// Location in "lat,lng" format for maps integration
  late String location;

  ActivityItemModel();

  /// Manual serialization
  Map<String, dynamic> toJson() {
    return {
      'time': time,
      'activity': activity,
      'location': location,
    };
  }

  /// Manual deserialization
  factory ActivityItemModel.fromJson(Map<String, dynamic> json) {
    return ActivityItemModel()
      ..time = json['time'] as String
      ..activity = json['activity'] as String
      ..location = json['location'] as String;
  }
  
  /// Parse latitude from location string
  double? get latitude {
    try {
      final parts = location.split(',');
      return double.parse(parts[0]);
    } catch (e) {
      return null;
    }
  }
  
  /// Parse longitude from location string  
  double? get longitude {
    try {
      final parts = location.split(',');
      return double.parse(parts[1]);
    } catch (e) {
      return null;
    }
  }
  
  /// Get formatted time for display (12-hour format)
  String get formattedTime {
    try {
      final parts = time.split(':');
      final hour = int.parse(parts[0]);
      final minute = parts[1];
      
      if (hour == 0) return '12:$minute AM';
      if (hour < 12) return '$hour:$minute AM';
      if (hour == 12) return '12:$minute PM';
      return '${hour - 12}:$minute PM';
    } catch (e) {
      return time;
    }
  }
}

/// chat message model
@Collection()
class ChatMessageModel {
  Id isarId = Isar.autoIncrement;
  
  late String id;
  late String itineraryId;
  late String content;
  late String role; // 'user' or 'assistant'
  late DateTime timestamp;
  
  /// Token usage for this message (cost tracking)
  int? tokenCount;

  ChatMessageModel();

  /// Simple JSON conversion
  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'itineraryId': itineraryId,
      'content': content,
      'role': role,
      'timestamp': timestamp.toIso8601String(),
      'tokenCount': tokenCount,
    };
  }

  factory ChatMessageModel.fromJson(Map<String, dynamic> json) {
    return ChatMessageModel()
      ..id = json['id'] as String
      ..itineraryId = json['itineraryId'] as String
      ..content = json['content'] as String
      ..role = json['role'] as String
      ..timestamp = DateTime.parse(json['timestamp'] as String)
      ..tokenCount = json['tokenCount'] as int?;
  }
}
